 How it works:

   Given two sequences of the same length, the CRC of the exclusive-or of the
   two sequences is equal to the exclusive-or of the CRCs of the sequences
   separately. This relation is a consequence of the linearity of the CRC over
   the Galois field of order two, referred to as GF(2). GF(2) consists of just
   the two elements 0 and 1, and the operations exclusive-or and logical-and,
   which take the place of arithmetic's addition and multiplication operations
   respectively. This additive or superposition property allows spoof to never
   need to know the message contents in order to find a solution. All it needs
   is the before and after CRCs, or really just the exclusive-or of those two
   CRCs.

   Given a sequence A and CRC p, we would like to modify A to a new sequence B,
   to give a specified CRC q. So {A, p} -> {B, q}. We are given A, p, and q,
   and we need to find B.

   There are many answers for B. In order to narrow those down, we would like
   to make only a small number of changes to A. Let D = A ^ B and r = p ^ q. We
   have from the additive property of CRCs that r = crc(D). We would like for D
   to be mostly zeros, with just a small number of ones, which represent the
   number of bit locations where A and B differ. r is simply calculated from p
   and q, which are known. We will pick a set of bit locations in D that we
   will allow spoof to set to one. These bit locations can be anywhere, such as
   all grouped at the end or beginning, randomly scattered in the sequence, the
   low bits of selected insignificant decimal digits, or perhaps other choices
   where the changed bits are not consequential to the transmitted message.
   spoof can also be used to attempt to correct a set of known erasure
   locations using the CRC.

   We will place in each candidate bit location in D a variable, named x_0,
   x_1, etc., with all of the other bits in D set to zero. The equation: r =
   crc(D) for a k-bit CRC can be seen as k binary equations in the x_i, over
   GF(2). We will define n such locations x_i, where n >= k, since then we have
   k equations with at least k unknowns. Out of the n x_i, we will look for a
   subset k x_i that results in a solution.

   Given the length of the sequence, r, and the locations of the x_i, spoof
   will determine the values of the x_i, from which D can be constructed. Then
   B = A ^ D, where q = crc(B). Or more simply, for each x_i that is one,
   invert the bit at that location in A to get B. spoof does not need to know
   A, just the locations of the x_i.

   For each x_i, we consider a sequence X_i which is all zeros except for a
   single one at the x_i location. We then calculate the CRC of each X_i,
   giving c_i = CRC(X_i). We now have n c_i values. If there is a solution,
   then there is a subset of the c_i that, when exclusive-ored together, is
   equal to r. To solve, we construct the matrix M that consists of the columns
   c_i. If x is the vector x_i, then we have M x = r. We take the inverse of M,
   which if it exists, gives the solution x = Inverse(M) r. For n > k, M is
   rectangular. In that case, a subset of k columns are found that is a
   non-singular square k by k matrix. That selects a subset of the x_i to
   potentially set to one. For the x_i with the value one, the corresponding
   locations in A need to be inverted to get a sequence B that has the CRC q.
   If all square subsets of the columns of M are singular, then there is no
   solution for the given set of bit locations (regardless of r). The user can
   then try a different or larger set of bit locations.

   The described application of spoof works as well for CRC's calculated with
   pre and/or post-processing, where the initial CRC value may be non-zero, and
   the final CRC value may be exclusive-or'ed with a constant. That processing
   can be seen as simply exclusive-or'ing a single constant with the CRC, where
   that constant depends only on the length of the sequence the CRC is over.
   spoof does its calculations using only a "pure" CRC with no pre- or
   post-processing. This is permitted since spoof is provided the exlusive-or
   of two sequences of the same length, which cancels exclusive-or'ed constant,
   leaving the pure CRC of the two sequences exclusive-or'ed.

   The usual way to calculate c_i = crc(X_i) takes an amount of time linear in
   the length of the sequence. However for sparse sequences, that execution
   time can be shortened dramatically by constructing matrix operators that
   represent the application of a series of zeros to the CRC. We construct a
   matrix representing the effect on the CRC of running a single zero bit
   through the CRC. Call it Z. Then we successively square that matrix to get
   operators for more zeros. Z**8 represents running a byte of zeros thruogh
   the CRC (where ** means to the power of). Z**16 is two bytes. Z**32 is four
   bytes. And so on. Then we simply decompose the length into a sum of powers
   of two, and apply the corresponding operators for those numbers of zeros to
   the CRC.

   As a result, spoof runs in O(log n) time, where n is the length of the
   sequence being spoofed. The execution time also depends on the degree of the
   CRC in order to square matrices. Let d be that degree. Then spoof runs in
   O(d**2 log(n)) time.